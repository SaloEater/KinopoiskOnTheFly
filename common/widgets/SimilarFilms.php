<?php

namespace common\widgets;

use common\repositories\FilmRepository;
use common\services\similar\ISearcher;
use common\services\similar\restrictors\IRestrictor;
use Yii;
use yii\base\Widget;
use yii\data\ArrayDataProvider;
use yii\helpers\Html;

class SimilarFilms extends Widget
{
    public static $DISPLAY_FLEX = 1;
    public static $DISPLAY_GRID = 2;

    public $display = null;

    /* @var $searchers ISearcher[]*/
    public $searchers = [];

    /* @var $restrictors IRestrictor[]*/
    public $restrictors = [];

    public $title = 'Похожие фильмы';

    public $maximum = null;

    public $searcherObjects = [];

    public $restrictorObjects = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (!$this->display) {
            $this->display =  self::$DISPLAY_FLEX;
        }
        if (!$this->maximum) {
            $this->maximum = 5;
        }

        foreach ($this->searchers as $searcher) {
            $this->searcherObjects[] = new $searcher['class']($searcher['config']);
        }

        foreach ($this->restrictors as $restrictor) {
            $this->restrictorObjects[] = new $restrictor['class']($restrictor['config']);
        }
    }

    public function run()
    {
        $filmIDs = [];

        $newIDs = [];
        /* @var $searcher ISearcher*/
        foreach ($this->searcherObjects as $searcher) {
            $found = $searcher->search();
            $newIDs = array_merge($found, $newIDs);
            $newIDs = array_unique($newIDs);
            if (count($newIDs) > $this->maximum) {
                break;
            }
        }

        if (!empty($this->restrictorObjects)) {
            $iteratorCounter = 0;
            do {
                /* @var $restrictor IRestrictor*/
                $validIDs = [];
                foreach ($this->restrictorObjects as $restrictor) {
                    foreach ($newIDs as $index=>$filmID) {
                        if ($restrictor->isValidWithID($filmID)) {
                            $validIDs[] = $newIDs[$index];
                        }
                    }
                    $restrictor->nextIteration();
                }
                $filmIDs = array_merge($validIDs, $filmIDs);
                $filmIDs = array_unique($filmIDs);
                $iteratorCounter++;
            } while(count($filmIDs) < $this->maximum && $iteratorCounter < 3);
        } else {
            $filmIDs = $newIDs;
        }

        //$filmIDs = ArrayHelper::Rand($filmIDs, $this->maximum);
        $filmIDs = array_slice($filmIDs, 0, $this->maximum);

        $content = '';
        switch($this->display){
            case self::$DISPLAY_GRID: {
                $content = $this->displayAsGrid($filmIDs);
                break;
            }
            case self::$DISPLAY_FLEX: {
                $content = $this->displayAsFlex($filmIDs);
            }
        };
        $header = Html::tag('div', $this->title,
            [
                'class' => 'border border-dark color-white font-weight-bold bg-777 p-1 border-bottom-0'
            ]);
        return $header.$content;
    }

    private function displayAsFlex(array $filmIDs)
    {
        $content = '';
        foreach ($filmIDs as $filmID)
        {
            $content .= Html::tag('div', SmallFilmViewWidget::widget([
                    'filmId' => $filmID
                ])) . ' ';
        }

        return Html::tag('div', $content, [
                'class' => 'border border-dark d-flex bg-light-gray w-100 justify-content-around'
            ]);
    }

    private function displayAsGrid(array $filmIDs)
    {
        $films = Yii::createObject(FilmRepository::class)->findByIDs($filmIDs);
        $dataProvider = new ArrayDataProvider([
            'allModels' => $films,
            'sort' => [
                'attributes' => ['title', 'rating', 'publish_year'],
            ],
        ]);
        $content = $this->render('@frontend/views/utility/filmgridview', [
            'dataProvider' => $dataProvider,
            'filterModel' => null,
            'id' => $this->searcherObjects[0]->uniqueId()
        ]);
        return $content;
    }
}